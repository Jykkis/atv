#include "ros/ros.h"
#include "can_node.hpp"
#include "bitmanip.hpp"
#include <sstream>
#include <functional>

using namespace atv_can;

CanNode::CanNode(int CAN_bitrate, int CAN_channel, unsigned int read_timeout_ms, unsigned int publications_per_sec)
    : can_bus_handler(CAN_bitrate, CAN_channel)
    , read_timeout_ms(read_timeout_ms)
    , publication_frequency_hz(publications_per_sec)
    , keep_reading(false)
    {}

CanNode::~CanNode() {}

uint64_t CanNode::generate_can_message_data(const DriveService::Request& req) {
    uint64_t data = 0;
    /*
    bits (0 starting from the right, bit 0 is LSB):
    0-15:   motor control value
    16-31:  turning radius
    32-33:  gear ratio (low, mid, high)
    34-35:  all wheel drive
    36:     motor control mode (direct (0) or reference (1))
    37:     forward (0) / reverse (1)
    */

    data |= req.direction;
    data <<= 1;
    data |= req.control_mode;
    data <<= 2;
    data |= req.all_wheel_drive;
    data <<= 2;
    data |= req.gear_ratio;
    data <<= 16;
    data |= req.turning_radius;
    data <<= 16;

    // unsigned integer, need to mask before or-operation (intermediate int64_t will be padded with 1s if negative)
    uint64_t mask_16 = 0xffff;
    data |= (req.motor_control & mask_16);

    return data;
}

bool CanNode::serve_send_request(DriveService::Request& req, DriveService::Response& resp) {
    CanMsg msg;
    msg.data = generate_can_message_data(req);
    msg.data_length = 8;
    msg.id = CanMsg::ATV_CONTROL_MESSAGE_ID;
    auto status = can_bus_handler.send_raw_message(msg);
    resp.status = status.status_string;
    return (status.status_code >= 0);
}

void CanNode::read_forever() {
    keep_reading = true;
    while(keep_reading) {
        read_next_message();
    }
}

void CanNode::read_next_message() {
    CanMsg message;
    CanMsgStatusInfo status = can_bus_handler.read_raw_message(message, read_timeout_ms);
    if (status.status_code != ::canOK) {
        return;
    }

    switch((message.id >> 8) & 0x0ffff) // MultiTool PGN format, ignore priority, reseved, DP and SA
    {
        case 0:
        {
            //probably error?
            break;
        }
        case CanMsg::MESSAGE_ID_ODOMETRY:
        {
            odo_msg.front_left =  get_bit_range(message.data, 0, 16);
            odo_msg.front_right = get_bit_range(message.data, 16, 16);
            odo_msg.rear_left =   get_bit_range(message.data, 32, 16);
            odo_msg.rear_right =  get_bit_range(message.data, 48, 16);
            odo_msg.time_received = ros::Time::now();
            break;
        }
        case CanMsg::MESSAGE_ID_STEERING_POSITION:
        {
            steer_msg.encoder_position = get_bit_range(message.data, 0, 16);
            steer_msg.time_received = ros::Time::now();
            break;

        }
        case CanMsg::MESSAGE_ID_GAS_PEDAL_POSITION:
        {
            gas_msg.pwm_ratio1 = get_bit_range(message.data, 0, 16);
            gas_msg.pwm_ratio2 = get_bit_range(message.data, 16, 16);
            gas_msg.time_received = ros::Time::now();
            break;
        }
        default:
        {
            //unknown message, don't care
            break;
        }
    }
}

void CanNode::run_publisher(ros::NodeHandle& node_handle) {
    ros::Publisher odo_publisher = node_handle.advertise<atv_can::OdometryMeasurement>(  "atv_odometry_measurement", 1000);
    ros::Publisher steer_publisher = node_handle.advertise<atv_can::SteeringMeasurement>("atv_steering_measurement", 1000);
    ros::Publisher gas_publisher = node_handle.advertise<atv_can::GasPedalMeasurement>(  "atv_gas_pedal_measurement",1000);
    ros::Rate loop_rate = publication_frequency_hz;
    while (ros::ok()) {
        odo_publisher.publish(odo_msg);
        steer_publisher.publish(steer_msg);
        gas_publisher.publish(gas_msg);
        loop_rate.sleep();
    }
}

void CanNode::run() {
    ros::NodeHandle node_handle;
    std::thread listener_thread (&CanNode::read_forever, this);
    std::thread publisher_thread(&CanNode::run_publisher, this, std::ref(node_handle));

    ros::ServiceServer service = node_handle.advertiseService("can_service", &CanNode::serve_send_request, this);
    ROS_INFO("CAN service, requests can be sent");

    ROS_INFO("Start reading CAN bus");

    ros::spin();


    keep_reading = false;
    listener_thread.join();
    publisher_thread.join();
}

int main(int argc, char** argv) {
    try {
        canInitializeLibrary();
        CanNode node(BAUD_250K, 0, 1000, 10);
        ros::init(argc, argv, "can_node");
        node.run();
    } catch (const std::exception& e) {
        std::cerr << e.what() << std::endl;
        return 1;
    }
    return 0;
}
