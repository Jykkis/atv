# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from atv_can/DriveServiceRequest.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class DriveServiceRequest(genpy.Message):
  _md5sum = "8aa6b99734c5768ca9def0a600e87c78"
  _type = "atv_can/DriveServiceRequest"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """int16 motor_control
uint16 turning_radius
uint8 gear_ratio
uint8 all_wheel_drive
bool control_mode
bool direction
"""
  __slots__ = ['motor_control','turning_radius','gear_ratio','all_wheel_drive','control_mode','direction']
  _slot_types = ['int16','uint16','uint8','uint8','bool','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       motor_control,turning_radius,gear_ratio,all_wheel_drive,control_mode,direction

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(DriveServiceRequest, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.motor_control is None:
        self.motor_control = 0
      if self.turning_radius is None:
        self.turning_radius = 0
      if self.gear_ratio is None:
        self.gear_ratio = 0
      if self.all_wheel_drive is None:
        self.all_wheel_drive = 0
      if self.control_mode is None:
        self.control_mode = False
      if self.direction is None:
        self.direction = False
    else:
      self.motor_control = 0
      self.turning_radius = 0
      self.gear_ratio = 0
      self.all_wheel_drive = 0
      self.control_mode = False
      self.direction = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_hH4B.pack(_x.motor_control, _x.turning_radius, _x.gear_ratio, _x.all_wheel_drive, _x.control_mode, _x.direction))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 8
      (_x.motor_control, _x.turning_radius, _x.gear_ratio, _x.all_wheel_drive, _x.control_mode, _x.direction,) = _struct_hH4B.unpack(str[start:end])
      self.control_mode = bool(self.control_mode)
      self.direction = bool(self.direction)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_hH4B.pack(_x.motor_control, _x.turning_radius, _x.gear_ratio, _x.all_wheel_drive, _x.control_mode, _x.direction))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 8
      (_x.motor_control, _x.turning_radius, _x.gear_ratio, _x.all_wheel_drive, _x.control_mode, _x.direction,) = _struct_hH4B.unpack(str[start:end])
      self.control_mode = bool(self.control_mode)
      self.direction = bool(self.direction)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_hH4B = struct.Struct("<hH4B")
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from atv_can/DriveServiceResponse.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class DriveServiceResponse(genpy.Message):
  _md5sum = "4fe5af303955c287688e7347e9b00278"
  _type = "atv_can/DriveServiceResponse"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """string status

"""
  __slots__ = ['status']
  _slot_types = ['string']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       status

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(DriveServiceResponse, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.status is None:
        self.status = ''
    else:
      self.status = ''

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.status
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.status = str[start:end].decode('utf-8')
      else:
        self.status = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.status
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.status = str[start:end].decode('utf-8')
      else:
        self.status = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
class DriveService(object):
  _type          = 'atv_can/DriveService'
  _md5sum = 'c25d42b04dddc79f7f5281624f435ed8'
  _request_class  = DriveServiceRequest
  _response_class = DriveServiceResponse
