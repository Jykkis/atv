# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from gps_msgs/GpsRange.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import gps_msgs.msg

class GpsRange(genpy.Message):
  _md5sum = "e597bac5463f4a71cf3a7e9ae61b3675"
  _type = "gps_msgs/GpsRange"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """## Useful general comment goes here
## Each receiver will be able to track differing numbers of satellites, so the
## fields are each of length 32, the number of SV's in the GPS constellation

# number of observations --> how far to iterate through the arrays
uint8 obs

## sv number for each satellite
uint8[33] prn

float64[33] psr
float32[33] psr_std

Carrier carrier
================================================================================
MSG: gps_msgs/Carrier
## Useful comments go here

float64[33] doppler

## signal to noise ratio ,Cn0
float64[33] noise

## equivalent to the negative of the accumulated doppler
float64[33] phase
float32[33] phase_std"""
  __slots__ = ['obs','prn','psr','psr_std','carrier']
  _slot_types = ['uint8','uint8[33]','float64[33]','float32[33]','gps_msgs/Carrier']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       obs,prn,psr,psr_std,carrier

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(GpsRange, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.obs is None:
        self.obs = 0
      if self.prn is None:
        self.prn = chr(0)*33
      if self.psr is None:
        self.psr = [0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.]
      if self.psr_std is None:
        self.psr_std = [0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.]
      if self.carrier is None:
        self.carrier = gps_msgs.msg.Carrier()
    else:
      self.obs = 0
      self.prn = chr(0)*33
      self.psr = [0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.]
      self.psr_std = [0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.]
      self.carrier = gps_msgs.msg.Carrier()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      buff.write(_struct_B.pack(self.obs))
      _x = self.prn
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(_struct_33B.pack(*_x))
      else:
        buff.write(_struct_33s.pack(_x))
      buff.write(_struct_33d.pack(*self.psr))
      buff.write(_struct_33f.pack(*self.psr_std))
      buff.write(_struct_33d.pack(*self.carrier.doppler))
      buff.write(_struct_33d.pack(*self.carrier.noise))
      buff.write(_struct_33d.pack(*self.carrier.phase))
      buff.write(_struct_33f.pack(*self.carrier.phase_std))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.carrier is None:
        self.carrier = gps_msgs.msg.Carrier()
      end = 0
      start = end
      end += 1
      (self.obs,) = _struct_B.unpack(str[start:end])
      start = end
      end += 33
      self.prn = str[start:end]
      start = end
      end += 264
      self.psr = _struct_33d.unpack(str[start:end])
      start = end
      end += 132
      self.psr_std = _struct_33f.unpack(str[start:end])
      start = end
      end += 264
      self.carrier.doppler = _struct_33d.unpack(str[start:end])
      start = end
      end += 264
      self.carrier.noise = _struct_33d.unpack(str[start:end])
      start = end
      end += 264
      self.carrier.phase = _struct_33d.unpack(str[start:end])
      start = end
      end += 132
      self.carrier.phase_std = _struct_33f.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      buff.write(_struct_B.pack(self.obs))
      _x = self.prn
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(_struct_33B.pack(*_x))
      else:
        buff.write(_struct_33s.pack(_x))
      buff.write(self.psr.tostring())
      buff.write(self.psr_std.tostring())
      buff.write(self.carrier.doppler.tostring())
      buff.write(self.carrier.noise.tostring())
      buff.write(self.carrier.phase.tostring())
      buff.write(self.carrier.phase_std.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.carrier is None:
        self.carrier = gps_msgs.msg.Carrier()
      end = 0
      start = end
      end += 1
      (self.obs,) = _struct_B.unpack(str[start:end])
      start = end
      end += 33
      self.prn = str[start:end]
      start = end
      end += 264
      self.psr = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=33)
      start = end
      end += 132
      self.psr_std = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=33)
      start = end
      end += 264
      self.carrier.doppler = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=33)
      start = end
      end += 264
      self.carrier.noise = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=33)
      start = end
      end += 264
      self.carrier.phase = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=33)
      start = end
      end += 132
      self.carrier.phase_std = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=33)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_33d = struct.Struct("<33d")
_struct_33f = struct.Struct("<33f")
_struct_B = struct.Struct("<B")
_struct_33s = struct.Struct("<33s")
_struct_33B = struct.Struct("<33B")
