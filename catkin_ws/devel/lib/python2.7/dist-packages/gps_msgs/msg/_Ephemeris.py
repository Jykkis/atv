# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from gps_msgs/Ephemeris.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import genpy
import std_msgs.msg

class Ephemeris(genpy.Message):
  _md5sum = "4e93179ee4a59fd3267f8021405bbe35"
  _type = "gps_msgs/Ephemeris"
  _has_header = True #flag to mark the presence of a Header object
  _full_text = """## Ephemeris Data for each satellite

## There are 33 ephemeris channels so that the element number will correspond to
##  the PRN number

Header header
    uint32 seq
    time stamp
    string frame_id

string  gps_id
float64 gps_time

# how far to iterate in.
int8 obs
int8[33] prn

int8[33]    health

# Positioning
float64[33] semimajor_axis    # sqrt(A), SQUARE ROOT of semi major axis (meters)
float64[33] mean_anomaly      # M0, Mean anomoly of reference time (rad)
float64[33] eccentricity      # ecc, 
float64[33] perigee_arg       # omega, Arguement of perigee (rad)
float64[33] cos_latitude      # cuc, Arguement of latitude, amplitude of cosine (rad)
float64[33] sin_latitude      # cus, Arguement of latitude, amplitude of sine (rad)
float64[33] cos_orbit_radius  # crc, Orbit radius, amplitude of cosine (rad)
float64[33] sin_orbit_radius  # crs, Orbit radius, amplitude of sine (rad)
float64[33] cos_inclination   # cic, Inclination, amplitude of cosine (rad)
float64[33] sin_inclination   # cis, Inclination, amplitude of sine (rad)
float64[33] inclination_angle # I0, Inclination angle at reference time (rad)
float64[33] right_ascension   # omega0,  Right ascension (rad)

# Movement
float64[33] mean_motion_diff  # Delta N, Mean motion difference (rad/s)
float64[33] inclination_rate  # I dot, Rate of inclination angle (rad/s)
float64[33] ascension_rate    # omega0 dot, Rate of right ascension (rad/s)

# Timing
float64[33] time_of_week      # tow, Time stamp of subframe 0 (seconds)
float64[33] reference_time    # toe, Reference time for ephemeris (seconds)
float64[33] clock_correction  # toc, SV clock correction term (seconds)
float64[33] group_delay       # tgd, Estimated group delay difference (seconds)
float64[33] clock_aging_1     # af0, Clock aging parameter (seconds)
float64[33] clock_aging_2     # af1, Clock aging parameter (seconds/seconds)
float64[33] clock_aging_3     # af2, Clock aging parameter (seconds/seconds/seconds)
================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id
"""
  __slots__ = ['header','seq','stamp','frame_id','gps_id','gps_time','obs','prn','health','semimajor_axis','mean_anomaly','eccentricity','perigee_arg','cos_latitude','sin_latitude','cos_orbit_radius','sin_orbit_radius','cos_inclination','sin_inclination','inclination_angle','right_ascension','mean_motion_diff','inclination_rate','ascension_rate','time_of_week','reference_time','clock_correction','group_delay','clock_aging_1','clock_aging_2','clock_aging_3']
  _slot_types = ['std_msgs/Header','uint32','time','string','string','float64','int8','int8[33]','int8[33]','float64[33]','float64[33]','float64[33]','float64[33]','float64[33]','float64[33]','float64[33]','float64[33]','float64[33]','float64[33]','float64[33]','float64[33]','float64[33]','float64[33]','float64[33]','float64[33]','float64[33]','float64[33]','float64[33]','float64[33]','float64[33]','float64[33]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,seq,stamp,frame_id,gps_id,gps_time,obs,prn,health,semimajor_axis,mean_anomaly,eccentricity,perigee_arg,cos_latitude,sin_latitude,cos_orbit_radius,sin_orbit_radius,cos_inclination,sin_inclination,inclination_angle,right_ascension,mean_motion_diff,inclination_rate,ascension_rate,time_of_week,reference_time,clock_correction,group_delay,clock_aging_1,clock_aging_2,clock_aging_3

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Ephemeris, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.seq is None:
        self.seq = 0
      if self.stamp is None:
        self.stamp = genpy.Time()
      if self.frame_id is None:
        self.frame_id = ''
      if self.gps_id is None:
        self.gps_id = ''
      if self.gps_time is None:
        self.gps_time = 0.
      if self.obs is None:
        self.obs = 0
      if self.prn is None:
        self.prn = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
      if self.health is None:
        self.health = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
      if self.semimajor_axis is None:
        self.semimajor_axis = [0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.]
      if self.mean_anomaly is None:
        self.mean_anomaly = [0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.]
      if self.eccentricity is None:
        self.eccentricity = [0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.]
      if self.perigee_arg is None:
        self.perigee_arg = [0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.]
      if self.cos_latitude is None:
        self.cos_latitude = [0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.]
      if self.sin_latitude is None:
        self.sin_latitude = [0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.]
      if self.cos_orbit_radius is None:
        self.cos_orbit_radius = [0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.]
      if self.sin_orbit_radius is None:
        self.sin_orbit_radius = [0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.]
      if self.cos_inclination is None:
        self.cos_inclination = [0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.]
      if self.sin_inclination is None:
        self.sin_inclination = [0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.]
      if self.inclination_angle is None:
        self.inclination_angle = [0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.]
      if self.right_ascension is None:
        self.right_ascension = [0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.]
      if self.mean_motion_diff is None:
        self.mean_motion_diff = [0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.]
      if self.inclination_rate is None:
        self.inclination_rate = [0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.]
      if self.ascension_rate is None:
        self.ascension_rate = [0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.]
      if self.time_of_week is None:
        self.time_of_week = [0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.]
      if self.reference_time is None:
        self.reference_time = [0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.]
      if self.clock_correction is None:
        self.clock_correction = [0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.]
      if self.group_delay is None:
        self.group_delay = [0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.]
      if self.clock_aging_1 is None:
        self.clock_aging_1 = [0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.]
      if self.clock_aging_2 is None:
        self.clock_aging_2 = [0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.]
      if self.clock_aging_3 is None:
        self.clock_aging_3 = [0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.]
    else:
      self.header = std_msgs.msg.Header()
      self.seq = 0
      self.stamp = genpy.Time()
      self.frame_id = ''
      self.gps_id = ''
      self.gps_time = 0.
      self.obs = 0
      self.prn = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
      self.health = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
      self.semimajor_axis = [0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.]
      self.mean_anomaly = [0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.]
      self.eccentricity = [0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.]
      self.perigee_arg = [0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.]
      self.cos_latitude = [0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.]
      self.sin_latitude = [0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.]
      self.cos_orbit_radius = [0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.]
      self.sin_orbit_radius = [0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.]
      self.cos_inclination = [0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.]
      self.sin_inclination = [0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.]
      self.inclination_angle = [0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.]
      self.right_ascension = [0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.]
      self.mean_motion_diff = [0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.]
      self.inclination_rate = [0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.]
      self.ascension_rate = [0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.]
      self.time_of_week = [0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.]
      self.reference_time = [0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.]
      self.clock_correction = [0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.]
      self.group_delay = [0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.]
      self.clock_aging_1 = [0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.]
      self.clock_aging_2 = [0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.]
      self.clock_aging_3 = [0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.]

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_3I.pack(_x.seq, _x.stamp.secs, _x.stamp.nsecs))
      _x = self.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.gps_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_db.pack(_x.gps_time, _x.obs))
      buff.write(_struct_33b.pack(*self.prn))
      buff.write(_struct_33b.pack(*self.health))
      buff.write(_struct_33d.pack(*self.semimajor_axis))
      buff.write(_struct_33d.pack(*self.mean_anomaly))
      buff.write(_struct_33d.pack(*self.eccentricity))
      buff.write(_struct_33d.pack(*self.perigee_arg))
      buff.write(_struct_33d.pack(*self.cos_latitude))
      buff.write(_struct_33d.pack(*self.sin_latitude))
      buff.write(_struct_33d.pack(*self.cos_orbit_radius))
      buff.write(_struct_33d.pack(*self.sin_orbit_radius))
      buff.write(_struct_33d.pack(*self.cos_inclination))
      buff.write(_struct_33d.pack(*self.sin_inclination))
      buff.write(_struct_33d.pack(*self.inclination_angle))
      buff.write(_struct_33d.pack(*self.right_ascension))
      buff.write(_struct_33d.pack(*self.mean_motion_diff))
      buff.write(_struct_33d.pack(*self.inclination_rate))
      buff.write(_struct_33d.pack(*self.ascension_rate))
      buff.write(_struct_33d.pack(*self.time_of_week))
      buff.write(_struct_33d.pack(*self.reference_time))
      buff.write(_struct_33d.pack(*self.clock_correction))
      buff.write(_struct_33d.pack(*self.group_delay))
      buff.write(_struct_33d.pack(*self.clock_aging_1))
      buff.write(_struct_33d.pack(*self.clock_aging_2))
      buff.write(_struct_33d.pack(*self.clock_aging_3))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.stamp is None:
        self.stamp = genpy.Time()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.seq, _x.stamp.secs, _x.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.frame_id = str[start:end].decode('utf-8')
      else:
        self.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.gps_id = str[start:end].decode('utf-8')
      else:
        self.gps_id = str[start:end]
      _x = self
      start = end
      end += 9
      (_x.gps_time, _x.obs,) = _struct_db.unpack(str[start:end])
      start = end
      end += 33
      self.prn = _struct_33b.unpack(str[start:end])
      start = end
      end += 33
      self.health = _struct_33b.unpack(str[start:end])
      start = end
      end += 264
      self.semimajor_axis = _struct_33d.unpack(str[start:end])
      start = end
      end += 264
      self.mean_anomaly = _struct_33d.unpack(str[start:end])
      start = end
      end += 264
      self.eccentricity = _struct_33d.unpack(str[start:end])
      start = end
      end += 264
      self.perigee_arg = _struct_33d.unpack(str[start:end])
      start = end
      end += 264
      self.cos_latitude = _struct_33d.unpack(str[start:end])
      start = end
      end += 264
      self.sin_latitude = _struct_33d.unpack(str[start:end])
      start = end
      end += 264
      self.cos_orbit_radius = _struct_33d.unpack(str[start:end])
      start = end
      end += 264
      self.sin_orbit_radius = _struct_33d.unpack(str[start:end])
      start = end
      end += 264
      self.cos_inclination = _struct_33d.unpack(str[start:end])
      start = end
      end += 264
      self.sin_inclination = _struct_33d.unpack(str[start:end])
      start = end
      end += 264
      self.inclination_angle = _struct_33d.unpack(str[start:end])
      start = end
      end += 264
      self.right_ascension = _struct_33d.unpack(str[start:end])
      start = end
      end += 264
      self.mean_motion_diff = _struct_33d.unpack(str[start:end])
      start = end
      end += 264
      self.inclination_rate = _struct_33d.unpack(str[start:end])
      start = end
      end += 264
      self.ascension_rate = _struct_33d.unpack(str[start:end])
      start = end
      end += 264
      self.time_of_week = _struct_33d.unpack(str[start:end])
      start = end
      end += 264
      self.reference_time = _struct_33d.unpack(str[start:end])
      start = end
      end += 264
      self.clock_correction = _struct_33d.unpack(str[start:end])
      start = end
      end += 264
      self.group_delay = _struct_33d.unpack(str[start:end])
      start = end
      end += 264
      self.clock_aging_1 = _struct_33d.unpack(str[start:end])
      start = end
      end += 264
      self.clock_aging_2 = _struct_33d.unpack(str[start:end])
      start = end
      end += 264
      self.clock_aging_3 = _struct_33d.unpack(str[start:end])
      self.stamp.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_3I.pack(_x.seq, _x.stamp.secs, _x.stamp.nsecs))
      _x = self.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.gps_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_db.pack(_x.gps_time, _x.obs))
      buff.write(self.prn.tostring())
      buff.write(self.health.tostring())
      buff.write(self.semimajor_axis.tostring())
      buff.write(self.mean_anomaly.tostring())
      buff.write(self.eccentricity.tostring())
      buff.write(self.perigee_arg.tostring())
      buff.write(self.cos_latitude.tostring())
      buff.write(self.sin_latitude.tostring())
      buff.write(self.cos_orbit_radius.tostring())
      buff.write(self.sin_orbit_radius.tostring())
      buff.write(self.cos_inclination.tostring())
      buff.write(self.sin_inclination.tostring())
      buff.write(self.inclination_angle.tostring())
      buff.write(self.right_ascension.tostring())
      buff.write(self.mean_motion_diff.tostring())
      buff.write(self.inclination_rate.tostring())
      buff.write(self.ascension_rate.tostring())
      buff.write(self.time_of_week.tostring())
      buff.write(self.reference_time.tostring())
      buff.write(self.clock_correction.tostring())
      buff.write(self.group_delay.tostring())
      buff.write(self.clock_aging_1.tostring())
      buff.write(self.clock_aging_2.tostring())
      buff.write(self.clock_aging_3.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.stamp is None:
        self.stamp = genpy.Time()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.seq, _x.stamp.secs, _x.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.frame_id = str[start:end].decode('utf-8')
      else:
        self.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.gps_id = str[start:end].decode('utf-8')
      else:
        self.gps_id = str[start:end]
      _x = self
      start = end
      end += 9
      (_x.gps_time, _x.obs,) = _struct_db.unpack(str[start:end])
      start = end
      end += 33
      self.prn = numpy.frombuffer(str[start:end], dtype=numpy.int8, count=33)
      start = end
      end += 33
      self.health = numpy.frombuffer(str[start:end], dtype=numpy.int8, count=33)
      start = end
      end += 264
      self.semimajor_axis = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=33)
      start = end
      end += 264
      self.mean_anomaly = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=33)
      start = end
      end += 264
      self.eccentricity = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=33)
      start = end
      end += 264
      self.perigee_arg = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=33)
      start = end
      end += 264
      self.cos_latitude = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=33)
      start = end
      end += 264
      self.sin_latitude = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=33)
      start = end
      end += 264
      self.cos_orbit_radius = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=33)
      start = end
      end += 264
      self.sin_orbit_radius = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=33)
      start = end
      end += 264
      self.cos_inclination = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=33)
      start = end
      end += 264
      self.sin_inclination = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=33)
      start = end
      end += 264
      self.inclination_angle = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=33)
      start = end
      end += 264
      self.right_ascension = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=33)
      start = end
      end += 264
      self.mean_motion_diff = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=33)
      start = end
      end += 264
      self.inclination_rate = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=33)
      start = end
      end += 264
      self.ascension_rate = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=33)
      start = end
      end += 264
      self.time_of_week = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=33)
      start = end
      end += 264
      self.reference_time = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=33)
      start = end
      end += 264
      self.clock_correction = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=33)
      start = end
      end += 264
      self.group_delay = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=33)
      start = end
      end += 264
      self.clock_aging_1 = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=33)
      start = end
      end += 264
      self.clock_aging_2 = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=33)
      start = end
      end += 264
      self.clock_aging_3 = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=33)
      self.stamp.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_33d = struct.Struct("<33d")
_struct_3I = struct.Struct("<3I")
_struct_db = struct.Struct("<db")
_struct_33b = struct.Struct("<33b")
