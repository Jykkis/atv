# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from gps_msgs/Carrier.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class Carrier(genpy.Message):
  _md5sum = "5eb5fb9988376e04bce4e625a341bd27"
  _type = "gps_msgs/Carrier"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """## Useful comments go here

float64[33] doppler

## signal to noise ratio ,Cn0
float64[33] noise

## equivalent to the negative of the accumulated doppler
float64[33] phase
float32[33] phase_std"""
  __slots__ = ['doppler','noise','phase','phase_std']
  _slot_types = ['float64[33]','float64[33]','float64[33]','float32[33]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       doppler,noise,phase,phase_std

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Carrier, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.doppler is None:
        self.doppler = [0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.]
      if self.noise is None:
        self.noise = [0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.]
      if self.phase is None:
        self.phase = [0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.]
      if self.phase_std is None:
        self.phase_std = [0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.]
    else:
      self.doppler = [0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.]
      self.noise = [0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.]
      self.phase = [0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.]
      self.phase_std = [0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.]

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      buff.write(_struct_33d.pack(*self.doppler))
      buff.write(_struct_33d.pack(*self.noise))
      buff.write(_struct_33d.pack(*self.phase))
      buff.write(_struct_33f.pack(*self.phase_std))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      start = end
      end += 264
      self.doppler = _struct_33d.unpack(str[start:end])
      start = end
      end += 264
      self.noise = _struct_33d.unpack(str[start:end])
      start = end
      end += 264
      self.phase = _struct_33d.unpack(str[start:end])
      start = end
      end += 132
      self.phase_std = _struct_33f.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      buff.write(self.doppler.tostring())
      buff.write(self.noise.tostring())
      buff.write(self.phase.tostring())
      buff.write(self.phase_std.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      start = end
      end += 264
      self.doppler = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=33)
      start = end
      end += 264
      self.noise = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=33)
      start = end
      end += 264
      self.phase = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=33)
      start = end
      end += 132
      self.phase_std = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=33)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_33d = struct.Struct("<33d")
_struct_33f = struct.Struct("<33f")
