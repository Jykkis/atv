# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from gps_msgs/L1L2Range.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import gps_msgs.msg
import genpy
import std_msgs.msg

class L1L2Range(genpy.Message):
  _md5sum = "9416a850ba54fa4c735dfb3813edd361"
  _type = "gps_msgs/L1L2Range"
  _has_header = True #flag to mark the presence of a Header object
  _full_text = """## This msg created 5/30/2013
## originally intended for sending to DRTK or TDCP

Header header
    uint32 seq
    time stamp
    string frame_id

string gps_id
int64 gps_time

# number of observations to follow ( for debugging )
int32 num_obs

GpsRange L1
GpsRange L2

float64 lat
float64 lon
float64 alt
float64 lat_cov
float64 lon_cov
float64 alt_cov
================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

================================================================================
MSG: gps_msgs/GpsRange
## Useful general comment goes here
## Each receiver will be able to track differing numbers of satellites, so the
## fields are each of length 32, the number of SV's in the GPS constellation

# number of observations --> how far to iterate through the arrays
uint8 obs

## sv number for each satellite
uint8[33] prn

float64[33] psr
float32[33] psr_std

Carrier carrier
================================================================================
MSG: gps_msgs/Carrier
## Useful comments go here

float64[33] doppler

## signal to noise ratio ,Cn0
float64[33] noise

## equivalent to the negative of the accumulated doppler
float64[33] phase
float32[33] phase_std"""
  __slots__ = ['header','seq','stamp','frame_id','gps_id','gps_time','num_obs','L1','L2','lat','lon','alt','lat_cov','lon_cov','alt_cov']
  _slot_types = ['std_msgs/Header','uint32','time','string','string','int64','int32','gps_msgs/GpsRange','gps_msgs/GpsRange','float64','float64','float64','float64','float64','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,seq,stamp,frame_id,gps_id,gps_time,num_obs,L1,L2,lat,lon,alt,lat_cov,lon_cov,alt_cov

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(L1L2Range, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.seq is None:
        self.seq = 0
      if self.stamp is None:
        self.stamp = genpy.Time()
      if self.frame_id is None:
        self.frame_id = ''
      if self.gps_id is None:
        self.gps_id = ''
      if self.gps_time is None:
        self.gps_time = 0
      if self.num_obs is None:
        self.num_obs = 0
      if self.L1 is None:
        self.L1 = gps_msgs.msg.GpsRange()
      if self.L2 is None:
        self.L2 = gps_msgs.msg.GpsRange()
      if self.lat is None:
        self.lat = 0.
      if self.lon is None:
        self.lon = 0.
      if self.alt is None:
        self.alt = 0.
      if self.lat_cov is None:
        self.lat_cov = 0.
      if self.lon_cov is None:
        self.lon_cov = 0.
      if self.alt_cov is None:
        self.alt_cov = 0.
    else:
      self.header = std_msgs.msg.Header()
      self.seq = 0
      self.stamp = genpy.Time()
      self.frame_id = ''
      self.gps_id = ''
      self.gps_time = 0
      self.num_obs = 0
      self.L1 = gps_msgs.msg.GpsRange()
      self.L2 = gps_msgs.msg.GpsRange()
      self.lat = 0.
      self.lon = 0.
      self.alt = 0.
      self.lat_cov = 0.
      self.lon_cov = 0.
      self.alt_cov = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_3I.pack(_x.seq, _x.stamp.secs, _x.stamp.nsecs))
      _x = self.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.gps_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_qiB.pack(_x.gps_time, _x.num_obs, _x.L1.obs))
      _x = self.L1.prn
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(_struct_33B.pack(*_x))
      else:
        buff.write(_struct_33s.pack(_x))
      buff.write(_struct_33d.pack(*self.L1.psr))
      buff.write(_struct_33f.pack(*self.L1.psr_std))
      buff.write(_struct_33d.pack(*self.L1.carrier.doppler))
      buff.write(_struct_33d.pack(*self.L1.carrier.noise))
      buff.write(_struct_33d.pack(*self.L1.carrier.phase))
      buff.write(_struct_33f.pack(*self.L1.carrier.phase_std))
      buff.write(_struct_B.pack(self.L2.obs))
      _x = self.L2.prn
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(_struct_33B.pack(*_x))
      else:
        buff.write(_struct_33s.pack(_x))
      buff.write(_struct_33d.pack(*self.L2.psr))
      buff.write(_struct_33f.pack(*self.L2.psr_std))
      buff.write(_struct_33d.pack(*self.L2.carrier.doppler))
      buff.write(_struct_33d.pack(*self.L2.carrier.noise))
      buff.write(_struct_33d.pack(*self.L2.carrier.phase))
      buff.write(_struct_33f.pack(*self.L2.carrier.phase_std))
      _x = self
      buff.write(_struct_6d.pack(_x.lat, _x.lon, _x.alt, _x.lat_cov, _x.lon_cov, _x.alt_cov))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.stamp is None:
        self.stamp = genpy.Time()
      if self.L1 is None:
        self.L1 = gps_msgs.msg.GpsRange()
      if self.L2 is None:
        self.L2 = gps_msgs.msg.GpsRange()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.seq, _x.stamp.secs, _x.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.frame_id = str[start:end].decode('utf-8')
      else:
        self.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.gps_id = str[start:end].decode('utf-8')
      else:
        self.gps_id = str[start:end]
      _x = self
      start = end
      end += 13
      (_x.gps_time, _x.num_obs, _x.L1.obs,) = _struct_qiB.unpack(str[start:end])
      start = end
      end += 33
      self.L1.prn = str[start:end]
      start = end
      end += 264
      self.L1.psr = _struct_33d.unpack(str[start:end])
      start = end
      end += 132
      self.L1.psr_std = _struct_33f.unpack(str[start:end])
      start = end
      end += 264
      self.L1.carrier.doppler = _struct_33d.unpack(str[start:end])
      start = end
      end += 264
      self.L1.carrier.noise = _struct_33d.unpack(str[start:end])
      start = end
      end += 264
      self.L1.carrier.phase = _struct_33d.unpack(str[start:end])
      start = end
      end += 132
      self.L1.carrier.phase_std = _struct_33f.unpack(str[start:end])
      start = end
      end += 1
      (self.L2.obs,) = _struct_B.unpack(str[start:end])
      start = end
      end += 33
      self.L2.prn = str[start:end]
      start = end
      end += 264
      self.L2.psr = _struct_33d.unpack(str[start:end])
      start = end
      end += 132
      self.L2.psr_std = _struct_33f.unpack(str[start:end])
      start = end
      end += 264
      self.L2.carrier.doppler = _struct_33d.unpack(str[start:end])
      start = end
      end += 264
      self.L2.carrier.noise = _struct_33d.unpack(str[start:end])
      start = end
      end += 264
      self.L2.carrier.phase = _struct_33d.unpack(str[start:end])
      start = end
      end += 132
      self.L2.carrier.phase_std = _struct_33f.unpack(str[start:end])
      _x = self
      start = end
      end += 48
      (_x.lat, _x.lon, _x.alt, _x.lat_cov, _x.lon_cov, _x.alt_cov,) = _struct_6d.unpack(str[start:end])
      self.stamp.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_3I.pack(_x.seq, _x.stamp.secs, _x.stamp.nsecs))
      _x = self.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.gps_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_qiB.pack(_x.gps_time, _x.num_obs, _x.L1.obs))
      _x = self.L1.prn
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(_struct_33B.pack(*_x))
      else:
        buff.write(_struct_33s.pack(_x))
      buff.write(self.L1.psr.tostring())
      buff.write(self.L1.psr_std.tostring())
      buff.write(self.L1.carrier.doppler.tostring())
      buff.write(self.L1.carrier.noise.tostring())
      buff.write(self.L1.carrier.phase.tostring())
      buff.write(self.L1.carrier.phase_std.tostring())
      buff.write(_struct_B.pack(self.L2.obs))
      _x = self.L2.prn
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(_struct_33B.pack(*_x))
      else:
        buff.write(_struct_33s.pack(_x))
      buff.write(self.L2.psr.tostring())
      buff.write(self.L2.psr_std.tostring())
      buff.write(self.L2.carrier.doppler.tostring())
      buff.write(self.L2.carrier.noise.tostring())
      buff.write(self.L2.carrier.phase.tostring())
      buff.write(self.L2.carrier.phase_std.tostring())
      _x = self
      buff.write(_struct_6d.pack(_x.lat, _x.lon, _x.alt, _x.lat_cov, _x.lon_cov, _x.alt_cov))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.stamp is None:
        self.stamp = genpy.Time()
      if self.L1 is None:
        self.L1 = gps_msgs.msg.GpsRange()
      if self.L2 is None:
        self.L2 = gps_msgs.msg.GpsRange()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.seq, _x.stamp.secs, _x.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.frame_id = str[start:end].decode('utf-8')
      else:
        self.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.gps_id = str[start:end].decode('utf-8')
      else:
        self.gps_id = str[start:end]
      _x = self
      start = end
      end += 13
      (_x.gps_time, _x.num_obs, _x.L1.obs,) = _struct_qiB.unpack(str[start:end])
      start = end
      end += 33
      self.L1.prn = str[start:end]
      start = end
      end += 264
      self.L1.psr = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=33)
      start = end
      end += 132
      self.L1.psr_std = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=33)
      start = end
      end += 264
      self.L1.carrier.doppler = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=33)
      start = end
      end += 264
      self.L1.carrier.noise = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=33)
      start = end
      end += 264
      self.L1.carrier.phase = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=33)
      start = end
      end += 132
      self.L1.carrier.phase_std = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=33)
      start = end
      end += 1
      (self.L2.obs,) = _struct_B.unpack(str[start:end])
      start = end
      end += 33
      self.L2.prn = str[start:end]
      start = end
      end += 264
      self.L2.psr = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=33)
      start = end
      end += 132
      self.L2.psr_std = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=33)
      start = end
      end += 264
      self.L2.carrier.doppler = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=33)
      start = end
      end += 264
      self.L2.carrier.noise = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=33)
      start = end
      end += 264
      self.L2.carrier.phase = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=33)
      start = end
      end += 132
      self.L2.carrier.phase_std = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=33)
      _x = self
      start = end
      end += 48
      (_x.lat, _x.lon, _x.alt, _x.lat_cov, _x.lon_cov, _x.alt_cov,) = _struct_6d.unpack(str[start:end])
      self.stamp.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_B = struct.Struct("<B")
_struct_6d = struct.Struct("<6d")
_struct_33s = struct.Struct("<33s")
_struct_qiB = struct.Struct("<qiB")
_struct_3I = struct.Struct("<3I")
_struct_33d = struct.Struct("<33d")
_struct_33f = struct.Struct("<33f")
_struct_33B = struct.Struct("<33B")
