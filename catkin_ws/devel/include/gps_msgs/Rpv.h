// Generated by gencpp from file gps_msgs/Rpv.msg
// DO NOT EDIT!


#ifndef GPS_MSGS_MESSAGE_RPV_H
#define GPS_MSGS_MESSAGE_RPV_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <gps_msgs/RpvData.h>
#include <gps_msgs/RpvData.h>
#include <gps_msgs/RpvData.h>

namespace gps_msgs
{
template <class ContainerAllocator>
struct Rpv_
{
  typedef Rpv_<ContainerAllocator> Type;

  Rpv_()
    : header()
    , seq(0)
    , stamp()
    , frame_id()
    , gps_id_from()
    , gps_id_to()
    , gps_time(0)
    , status(0)
    , ratio(0.0)
    , input_obs(0)
    , non_fault_obs(0)
    , amb_obs(0)
    , sp()
    , lp()
    , hp()
    , base_prn_float(0)
    , base_prn_fixed(0)  {
    }
  Rpv_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , seq(0)
    , stamp()
    , frame_id(_alloc)
    , gps_id_from(_alloc)
    , gps_id_to(_alloc)
    , gps_time(0)
    , status(0)
    , ratio(0.0)
    , input_obs(0)
    , non_fault_obs(0)
    , amb_obs(0)
    , sp(_alloc)
    , lp(_alloc)
    , hp(_alloc)
    , base_prn_float(0)
    , base_prn_fixed(0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint32_t _seq_type;
  _seq_type seq;

   typedef ros::Time _stamp_type;
  _stamp_type stamp;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _frame_id_type;
  _frame_id_type frame_id;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _gps_id_from_type;
  _gps_id_from_type gps_id_from;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _gps_id_to_type;
  _gps_id_to_type gps_id_to;

   typedef int64_t _gps_time_type;
  _gps_time_type gps_time;

   typedef int8_t _status_type;
  _status_type status;

   typedef double _ratio_type;
  _ratio_type ratio;

   typedef int32_t _input_obs_type;
  _input_obs_type input_obs;

   typedef int32_t _non_fault_obs_type;
  _non_fault_obs_type non_fault_obs;

   typedef int32_t _amb_obs_type;
  _amb_obs_type amb_obs;

   typedef  ::gps_msgs::RpvData_<ContainerAllocator>  _sp_type;
  _sp_type sp;

   typedef  ::gps_msgs::RpvData_<ContainerAllocator>  _lp_type;
  _lp_type lp;

   typedef  ::gps_msgs::RpvData_<ContainerAllocator>  _hp_type;
  _hp_type hp;

   typedef int32_t _base_prn_float_type;
  _base_prn_float_type base_prn_float;

   typedef int32_t _base_prn_fixed_type;
  _base_prn_fixed_type base_prn_fixed;




  typedef boost::shared_ptr< ::gps_msgs::Rpv_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::gps_msgs::Rpv_<ContainerAllocator> const> ConstPtr;

}; // struct Rpv_

typedef ::gps_msgs::Rpv_<std::allocator<void> > Rpv;

typedef boost::shared_ptr< ::gps_msgs::Rpv > RpvPtr;
typedef boost::shared_ptr< ::gps_msgs::Rpv const> RpvConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::gps_msgs::Rpv_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::gps_msgs::Rpv_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace gps_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'std_msgs': ['/opt/ros/jade/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/jade/share/geometry_msgs/cmake/../msg'], 'sensor_msgs': ['/opt/ros/jade/share/sensor_msgs/cmake/../msg'], 'gps_msgs': ['/home/atv/atv-project-2017/catkin_ws/src/gps_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::gps_msgs::Rpv_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::gps_msgs::Rpv_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::gps_msgs::Rpv_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::gps_msgs::Rpv_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::gps_msgs::Rpv_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::gps_msgs::Rpv_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::gps_msgs::Rpv_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d0dd395e0a43da31b99eaff5928463a1";
  }

  static const char* value(const ::gps_msgs::Rpv_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd0dd395e0a43da31ULL;
  static const uint64_t static_value2 = 0xb99eaff5928463a1ULL;
};

template<class ContainerAllocator>
struct DataType< ::gps_msgs::Rpv_<ContainerAllocator> >
{
  static const char* value()
  {
    return "gps_msgs/Rpv";
  }

  static const char* value(const ::gps_msgs::Rpv_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::gps_msgs::Rpv_<ContainerAllocator> >
{
  static const char* value()
  {
    return "## This is the advanced output message for DRTK. It is used primarily for \n\
## debugging and contains much information that is of no use to the end user.\n\
Header header\n\
    uint32 seq\n\
    time stamp\n\
    string frame_id\n\
\n\
# Assuming that the gps\n\
string gps_id_from\n\
string gps_id_to\n\
\n\
# GPS Time of output (ms into week)\n\
int64 gps_time\n\
\n\
int8 status # Output status\n\
            #  2 : High precision solution available\n\
            #  1 : Low precision solution only (high precision is zero)\n\
            #  0 : Insufficient observations\n\
            # -1 : Time stamps of input data do not match\n\
            # -2 : Already computed solution for time stamp on input data\n\
            # -3 : No L1 range measurements on receiver 1\n\
            # -4 : No L2 range measurements on receiver 1\n\
            # -5 : No L1 range measurements on receiver 2\n\
            # -6 : No L2 range measurements on receiver 2\n\
\n\
# ratio resultant from the LAMBDA method\n\
float64 ratio\n\
\n\
# number of input observations common across all with no cycle slip and which \n\
# are continuous between timesteps\n\
int32 input_obs\n\
\n\
# numb of \n\
int32 non_fault_obs\n\
# Number of fixed ambiguiity observations\n\
int32 amb_obs\n\
\n\
\n\
# Standard Positioning \n\
RpvData sp\n\
\n\
# Low Precision\n\
RpvData lp\n\
\n\
# High Precision\n\
RpvData hp\n\
\n\
## base prn used for double differencing - floating ambiguities\n\
int32 base_prn_float\n\
\n\
## base prn used for double differencing - fixed integer ambiguities\n\
int32 base_prn_fixed\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: gps_msgs/RpvData\n\
XYZRpvData xyz\n\
ENURpvData enu\n\
float64 magnitude\n\
float64 horizontal_magnitude\n\
================================================================================\n\
MSG: gps_msgs/XYZRpvData\n\
float64 x\n\
float64 y\n\
float64 z\n\
================================================================================\n\
MSG: gps_msgs/ENURpvData\n\
float64 e\n\
float64 n\n\
float64 u\n\
";
  }

  static const char* value(const ::gps_msgs::Rpv_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::gps_msgs::Rpv_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.seq);
      stream.next(m.stamp);
      stream.next(m.frame_id);
      stream.next(m.gps_id_from);
      stream.next(m.gps_id_to);
      stream.next(m.gps_time);
      stream.next(m.status);
      stream.next(m.ratio);
      stream.next(m.input_obs);
      stream.next(m.non_fault_obs);
      stream.next(m.amb_obs);
      stream.next(m.sp);
      stream.next(m.lp);
      stream.next(m.hp);
      stream.next(m.base_prn_float);
      stream.next(m.base_prn_fixed);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Rpv_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::gps_msgs::Rpv_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::gps_msgs::Rpv_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "seq: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.seq);
    s << indent << "stamp: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.stamp);
    s << indent << "frame_id: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.frame_id);
    s << indent << "gps_id_from: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.gps_id_from);
    s << indent << "gps_id_to: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.gps_id_to);
    s << indent << "gps_time: ";
    Printer<int64_t>::stream(s, indent + "  ", v.gps_time);
    s << indent << "status: ";
    Printer<int8_t>::stream(s, indent + "  ", v.status);
    s << indent << "ratio: ";
    Printer<double>::stream(s, indent + "  ", v.ratio);
    s << indent << "input_obs: ";
    Printer<int32_t>::stream(s, indent + "  ", v.input_obs);
    s << indent << "non_fault_obs: ";
    Printer<int32_t>::stream(s, indent + "  ", v.non_fault_obs);
    s << indent << "amb_obs: ";
    Printer<int32_t>::stream(s, indent + "  ", v.amb_obs);
    s << indent << "sp: ";
    s << std::endl;
    Printer< ::gps_msgs::RpvData_<ContainerAllocator> >::stream(s, indent + "  ", v.sp);
    s << indent << "lp: ";
    s << std::endl;
    Printer< ::gps_msgs::RpvData_<ContainerAllocator> >::stream(s, indent + "  ", v.lp);
    s << indent << "hp: ";
    s << std::endl;
    Printer< ::gps_msgs::RpvData_<ContainerAllocator> >::stream(s, indent + "  ", v.hp);
    s << indent << "base_prn_float: ";
    Printer<int32_t>::stream(s, indent + "  ", v.base_prn_float);
    s << indent << "base_prn_fixed: ";
    Printer<int32_t>::stream(s, indent + "  ", v.base_prn_fixed);
  }
};

} // namespace message_operations
} // namespace ros

#endif // GPS_MSGS_MESSAGE_RPV_H
