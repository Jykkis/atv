// Generated by gencpp from file gps_msgs/Carrier.msg
// DO NOT EDIT!


#ifndef GPS_MSGS_MESSAGE_CARRIER_H
#define GPS_MSGS_MESSAGE_CARRIER_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace gps_msgs
{
template <class ContainerAllocator>
struct Carrier_
{
  typedef Carrier_<ContainerAllocator> Type;

  Carrier_()
    : doppler()
    , noise()
    , phase()
    , phase_std()  {
      doppler.assign(0.0);

      noise.assign(0.0);

      phase.assign(0.0);

      phase_std.assign(0.0);
  }
  Carrier_(const ContainerAllocator& _alloc)
    : doppler()
    , noise()
    , phase()
    , phase_std()  {
  (void)_alloc;
      doppler.assign(0.0);

      noise.assign(0.0);

      phase.assign(0.0);

      phase_std.assign(0.0);
  }



   typedef boost::array<double, 33>  _doppler_type;
  _doppler_type doppler;

   typedef boost::array<double, 33>  _noise_type;
  _noise_type noise;

   typedef boost::array<double, 33>  _phase_type;
  _phase_type phase;

   typedef boost::array<float, 33>  _phase_std_type;
  _phase_std_type phase_std;




  typedef boost::shared_ptr< ::gps_msgs::Carrier_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::gps_msgs::Carrier_<ContainerAllocator> const> ConstPtr;

}; // struct Carrier_

typedef ::gps_msgs::Carrier_<std::allocator<void> > Carrier;

typedef boost::shared_ptr< ::gps_msgs::Carrier > CarrierPtr;
typedef boost::shared_ptr< ::gps_msgs::Carrier const> CarrierConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::gps_msgs::Carrier_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::gps_msgs::Carrier_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace gps_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/jade/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/jade/share/geometry_msgs/cmake/../msg'], 'sensor_msgs': ['/opt/ros/jade/share/sensor_msgs/cmake/../msg'], 'gps_msgs': ['/home/atv/atv-project-2017/catkin_ws/src/gps_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::gps_msgs::Carrier_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::gps_msgs::Carrier_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::gps_msgs::Carrier_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::gps_msgs::Carrier_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::gps_msgs::Carrier_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::gps_msgs::Carrier_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::gps_msgs::Carrier_<ContainerAllocator> >
{
  static const char* value()
  {
    return "5eb5fb9988376e04bce4e625a341bd27";
  }

  static const char* value(const ::gps_msgs::Carrier_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x5eb5fb9988376e04ULL;
  static const uint64_t static_value2 = 0xbce4e625a341bd27ULL;
};

template<class ContainerAllocator>
struct DataType< ::gps_msgs::Carrier_<ContainerAllocator> >
{
  static const char* value()
  {
    return "gps_msgs/Carrier";
  }

  static const char* value(const ::gps_msgs::Carrier_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::gps_msgs::Carrier_<ContainerAllocator> >
{
  static const char* value()
  {
    return "## Useful comments go here\n\
\n\
float64[33] doppler\n\
\n\
## signal to noise ratio ,Cn0\n\
float64[33] noise\n\
\n\
## equivalent to the negative of the accumulated doppler\n\
float64[33] phase\n\
float32[33] phase_std\n\
";
  }

  static const char* value(const ::gps_msgs::Carrier_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::gps_msgs::Carrier_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.doppler);
      stream.next(m.noise);
      stream.next(m.phase);
      stream.next(m.phase_std);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Carrier_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::gps_msgs::Carrier_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::gps_msgs::Carrier_<ContainerAllocator>& v)
  {
    s << indent << "doppler[]" << std::endl;
    for (size_t i = 0; i < v.doppler.size(); ++i)
    {
      s << indent << "  doppler[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.doppler[i]);
    }
    s << indent << "noise[]" << std::endl;
    for (size_t i = 0; i < v.noise.size(); ++i)
    {
      s << indent << "  noise[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.noise[i]);
    }
    s << indent << "phase[]" << std::endl;
    for (size_t i = 0; i < v.phase.size(); ++i)
    {
      s << indent << "  phase[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.phase[i]);
    }
    s << indent << "phase_std[]" << std::endl;
    for (size_t i = 0; i < v.phase_std.size(); ++i)
    {
      s << indent << "  phase_std[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.phase_std[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // GPS_MSGS_MESSAGE_CARRIER_H
