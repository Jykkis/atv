// Generated by gencpp from file gps_msgs/L1Range.msg
// DO NOT EDIT!


#ifndef GPS_MSGS_MESSAGE_L1RANGE_H
#define GPS_MSGS_MESSAGE_L1RANGE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <gps_msgs/GpsRange.h>

namespace gps_msgs
{
template <class ContainerAllocator>
struct L1Range_
{
  typedef L1Range_<ContainerAllocator> Type;

  L1Range_()
    : header()
    , seq(0)
    , stamp()
    , frame_id()
    , gps_id()
    , gps_time(0)
    , L1()
    , lat(0.0)
    , lon(0.0)
    , alt(0.0)
    , lat_cov(0.0)
    , lon_cov(0.0)
    , alt_cov(0.0)  {
    }
  L1Range_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , seq(0)
    , stamp()
    , frame_id(_alloc)
    , gps_id(_alloc)
    , gps_time(0)
    , L1(_alloc)
    , lat(0.0)
    , lon(0.0)
    , alt(0.0)
    , lat_cov(0.0)
    , lon_cov(0.0)
    , alt_cov(0.0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint32_t _seq_type;
  _seq_type seq;

   typedef ros::Time _stamp_type;
  _stamp_type stamp;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _frame_id_type;
  _frame_id_type frame_id;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _gps_id_type;
  _gps_id_type gps_id;

   typedef int64_t _gps_time_type;
  _gps_time_type gps_time;

   typedef  ::gps_msgs::GpsRange_<ContainerAllocator>  _L1_type;
  _L1_type L1;

   typedef double _lat_type;
  _lat_type lat;

   typedef double _lon_type;
  _lon_type lon;

   typedef double _alt_type;
  _alt_type alt;

   typedef double _lat_cov_type;
  _lat_cov_type lat_cov;

   typedef double _lon_cov_type;
  _lon_cov_type lon_cov;

   typedef double _alt_cov_type;
  _alt_cov_type alt_cov;




  typedef boost::shared_ptr< ::gps_msgs::L1Range_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::gps_msgs::L1Range_<ContainerAllocator> const> ConstPtr;

}; // struct L1Range_

typedef ::gps_msgs::L1Range_<std::allocator<void> > L1Range;

typedef boost::shared_ptr< ::gps_msgs::L1Range > L1RangePtr;
typedef boost::shared_ptr< ::gps_msgs::L1Range const> L1RangeConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::gps_msgs::L1Range_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::gps_msgs::L1Range_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace gps_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'std_msgs': ['/opt/ros/jade/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/jade/share/geometry_msgs/cmake/../msg'], 'sensor_msgs': ['/opt/ros/jade/share/sensor_msgs/cmake/../msg'], 'gps_msgs': ['/home/atv/atv-project-2017/catkin_ws/src/gps_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::gps_msgs::L1Range_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::gps_msgs::L1Range_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::gps_msgs::L1Range_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::gps_msgs::L1Range_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::gps_msgs::L1Range_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::gps_msgs::L1Range_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::gps_msgs::L1Range_<ContainerAllocator> >
{
  static const char* value()
  {
    return "48af8bb7d8f541371fb9d7dd349d5bca";
  }

  static const char* value(const ::gps_msgs::L1Range_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x48af8bb7d8f54137ULL;
  static const uint64_t static_value2 = 0x1fb9d7dd349d5bcaULL;
};

template<class ContainerAllocator>
struct DataType< ::gps_msgs::L1Range_<ContainerAllocator> >
{
  static const char* value()
  {
    return "gps_msgs/L1Range";
  }

  static const char* value(const ::gps_msgs::L1Range_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::gps_msgs::L1Range_<ContainerAllocator> >
{
  static const char* value()
  {
    return "## This msg created 5/30/2013\n\
## originally intended for sending to DRTK or TDCP\n\
\n\
Header header\n\
    uint32 seq\n\
    time stamp\n\
    string frame_id\n\
\n\
string gps_id\n\
int64 gps_time\n\
\n\
GpsRange L1\n\
\n\
float64 lat\n\
float64 lon\n\
float64 alt\n\
float64 lat_cov\n\
float64 lon_cov\n\
float64 alt_cov\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: gps_msgs/GpsRange\n\
## Useful general comment goes here\n\
## Each receiver will be able to track differing numbers of satellites, so the\n\
## fields are each of length 32, the number of SV's in the GPS constellation\n\
\n\
# number of observations --> how far to iterate through the arrays\n\
uint8 obs\n\
\n\
## sv number for each satellite\n\
uint8[33] prn\n\
\n\
float64[33] psr\n\
float32[33] psr_std\n\
\n\
Carrier carrier\n\
================================================================================\n\
MSG: gps_msgs/Carrier\n\
## Useful comments go here\n\
\n\
float64[33] doppler\n\
\n\
## signal to noise ratio ,Cn0\n\
float64[33] noise\n\
\n\
## equivalent to the negative of the accumulated doppler\n\
float64[33] phase\n\
float32[33] phase_std\n\
";
  }

  static const char* value(const ::gps_msgs::L1Range_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::gps_msgs::L1Range_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.seq);
      stream.next(m.stamp);
      stream.next(m.frame_id);
      stream.next(m.gps_id);
      stream.next(m.gps_time);
      stream.next(m.L1);
      stream.next(m.lat);
      stream.next(m.lon);
      stream.next(m.alt);
      stream.next(m.lat_cov);
      stream.next(m.lon_cov);
      stream.next(m.alt_cov);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct L1Range_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::gps_msgs::L1Range_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::gps_msgs::L1Range_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "seq: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.seq);
    s << indent << "stamp: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.stamp);
    s << indent << "frame_id: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.frame_id);
    s << indent << "gps_id: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.gps_id);
    s << indent << "gps_time: ";
    Printer<int64_t>::stream(s, indent + "  ", v.gps_time);
    s << indent << "L1: ";
    s << std::endl;
    Printer< ::gps_msgs::GpsRange_<ContainerAllocator> >::stream(s, indent + "  ", v.L1);
    s << indent << "lat: ";
    Printer<double>::stream(s, indent + "  ", v.lat);
    s << indent << "lon: ";
    Printer<double>::stream(s, indent + "  ", v.lon);
    s << indent << "alt: ";
    Printer<double>::stream(s, indent + "  ", v.alt);
    s << indent << "lat_cov: ";
    Printer<double>::stream(s, indent + "  ", v.lat_cov);
    s << indent << "lon_cov: ";
    Printer<double>::stream(s, indent + "  ", v.lon_cov);
    s << indent << "alt_cov: ";
    Printer<double>::stream(s, indent + "  ", v.alt_cov);
  }
};

} // namespace message_operations
} // namespace ros

#endif // GPS_MSGS_MESSAGE_L1RANGE_H
