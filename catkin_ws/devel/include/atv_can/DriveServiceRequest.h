// Generated by gencpp from file atv_can/DriveServiceRequest.msg
// DO NOT EDIT!


#ifndef ATV_CAN_MESSAGE_DRIVESERVICEREQUEST_H
#define ATV_CAN_MESSAGE_DRIVESERVICEREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace atv_can
{
template <class ContainerAllocator>
struct DriveServiceRequest_
{
  typedef DriveServiceRequest_<ContainerAllocator> Type;

  DriveServiceRequest_()
    : motor_control(0)
    , turning_radius(0)
    , gear_ratio(0)
    , all_wheel_drive(0)
    , control_mode(false)
    , direction(false)  {
    }
  DriveServiceRequest_(const ContainerAllocator& _alloc)
    : motor_control(0)
    , turning_radius(0)
    , gear_ratio(0)
    , all_wheel_drive(0)
    , control_mode(false)
    , direction(false)  {
  (void)_alloc;
    }



   typedef int16_t _motor_control_type;
  _motor_control_type motor_control;

   typedef uint16_t _turning_radius_type;
  _turning_radius_type turning_radius;

   typedef uint8_t _gear_ratio_type;
  _gear_ratio_type gear_ratio;

   typedef uint8_t _all_wheel_drive_type;
  _all_wheel_drive_type all_wheel_drive;

   typedef uint8_t _control_mode_type;
  _control_mode_type control_mode;

   typedef uint8_t _direction_type;
  _direction_type direction;




  typedef boost::shared_ptr< ::atv_can::DriveServiceRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::atv_can::DriveServiceRequest_<ContainerAllocator> const> ConstPtr;

}; // struct DriveServiceRequest_

typedef ::atv_can::DriveServiceRequest_<std::allocator<void> > DriveServiceRequest;

typedef boost::shared_ptr< ::atv_can::DriveServiceRequest > DriveServiceRequestPtr;
typedef boost::shared_ptr< ::atv_can::DriveServiceRequest const> DriveServiceRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::atv_can::DriveServiceRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::atv_can::DriveServiceRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace atv_can

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/jade/share/std_msgs/cmake/../msg'], 'atv_can': ['/home/atv/atv-project-2017/catkin_ws/src/atv_can/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::atv_can::DriveServiceRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::atv_can::DriveServiceRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::atv_can::DriveServiceRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::atv_can::DriveServiceRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::atv_can::DriveServiceRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::atv_can::DriveServiceRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::atv_can::DriveServiceRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "8aa6b99734c5768ca9def0a600e87c78";
  }

  static const char* value(const ::atv_can::DriveServiceRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x8aa6b99734c5768cULL;
  static const uint64_t static_value2 = 0xa9def0a600e87c78ULL;
};

template<class ContainerAllocator>
struct DataType< ::atv_can::DriveServiceRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "atv_can/DriveServiceRequest";
  }

  static const char* value(const ::atv_can::DriveServiceRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::atv_can::DriveServiceRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int16 motor_control\n\
uint16 turning_radius\n\
uint8 gear_ratio\n\
uint8 all_wheel_drive\n\
bool control_mode\n\
bool direction\n\
";
  }

  static const char* value(const ::atv_can::DriveServiceRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::atv_can::DriveServiceRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.motor_control);
      stream.next(m.turning_radius);
      stream.next(m.gear_ratio);
      stream.next(m.all_wheel_drive);
      stream.next(m.control_mode);
      stream.next(m.direction);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct DriveServiceRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::atv_can::DriveServiceRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::atv_can::DriveServiceRequest_<ContainerAllocator>& v)
  {
    s << indent << "motor_control: ";
    Printer<int16_t>::stream(s, indent + "  ", v.motor_control);
    s << indent << "turning_radius: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.turning_radius);
    s << indent << "gear_ratio: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.gear_ratio);
    s << indent << "all_wheel_drive: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.all_wheel_drive);
    s << indent << "control_mode: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.control_mode);
    s << indent << "direction: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.direction);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ATV_CAN_MESSAGE_DRIVESERVICEREQUEST_H
